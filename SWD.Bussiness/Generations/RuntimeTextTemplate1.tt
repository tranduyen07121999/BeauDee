<#@ template language="C#" hostspecific="true"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ output extension="cs" #>
<#
var files=GetCsvFileNames();
foreach (string item in files.Where(w => !w.EndsWith("Context"))) {
#>
/////////////////////////////////////////////////////////////////
//
//              AUTO-GENERATED
//
/////////////////////////////////////////////////////////////////
namespace SWD.Bussiness.Services
{
    using Reso.Core.BaseConnect;
    using SWD.Bussiness.Models;
    using SWD.Bussiness.Repositories;
    public partial interface I<#= item #>Sv:IBaseService<<#= item #>>
    {
    }
    public partial class <#= item #>Sv:BaseService<<#= item #>>,I<#= item #>Sv
    {
        public <#= item #>Sv(IUnitOfWork unitOfWork,I<#= item #>Repository repository):base(unitOfWork,repository){}
    }
}
<#
  // End of file.
  SaveOutput(item.ToString() + "ServiceGen.cs","Services");
}
#>
<#
foreach (string item in files.Where(w => !w.EndsWith("Context"))) {
#>
/////////////////////////////////////////////////////////////////
//
//              AUTO-GENERATED
//
/////////////////////////////////////////////////////////////////

using Microsoft.EntityFrameworkCore;
using Reso.Core.BaseConnect;
using SWD.Bussiness.Models;
namespace SWD.Bussiness.Repositories
{
    public partial interface I<#= item #>Repository :IBaseRepository<<#= item #>>
    {
    }
    public partial class <#= item #>Repository :BaseRepository<<#= item #>>, I<#= item #>Repository
    {
         public <#= item #>Repository(DbContext dbContext) : base(dbContext)
         {
         }
    }
}

<#
  // End of file.
  SaveOutput(item.ToString() + "RepositoryGen.cs","Repositories");
}
#>

/////////////////////////////////////////////////////////////////
//
//              AUTO-GENERATED
//
/////////////////////////////////////////////////////////////////

using SWD.Bussiness.Models;
using Microsoft.Extensions.DependencyInjection;
using SWD.Bussiness.Services;
using SWD.Bussiness.Repositories;
using Microsoft.EntityFrameworkCore;
using Reso.Core.BaseConnect;
namespace SWD.Bussiness.Commons
{
    public static class DependencyInjectionResolverGen
    {
        public static void InitializerDI(this IServiceCollection services)
        {
            services.AddScoped<IUnitOfWork, UnitOfWork>();
            services.AddScoped<DbContext, <#= files.FirstOrDefault(f=>f.EndsWith("Context")) #>>();
        <#
        foreach (string item in files.Where(w => !w.EndsWith("Context"))) {
        #>

            services.AddScoped<I<#= item #>Sv, <#= item #>Sv>();
            services.AddScoped<I<#= item #>Repository, <#= item #>Repository>();
        <#
        }
        #>
}
    }
}
<#
 SaveOutput("DependencyInjectionResolverGen.cs","DependencyInjection");
#>



<#+
private void SaveOutput(string outputFileName,string folder) {
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  if(!Directory.Exists(Path.Combine(templateDirectory,folder))) { Directory.CreateDirectory(Path.Combine(templateDirectory,folder)); }
  string outputFilePath = Path.Combine(templateDirectory,folder, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
   this.GenerationEnvironment.Clear();
}
private IEnumerable<string> GetCsvFileNames()
    {
        var path = Host.ResolvePath("..\\Models");
        return Directory.GetFiles(path, "*.cs").Select(s => new FileInfo(s).Name.Replace(".cs",""));        
    }
#>